问题
  Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
Hint:

You should make use of what you have produced already.
Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.
  意思是将数二值化后求得和，列如
  8是1000，就是1+0+0+0=1；
  7是0111,就是0+1+1+1=3;
解法一  常用除法
  vector<int> countBits(int num) {
    vector<int> res(num+1,0);
    for (int i = 0; i <= num; ++i)
    {
        int temp=i;
        int count=0;
        //这个while是整数的数制转换；

        ——采用“基数除法”，具体步骤如下：

        （1）将给定的十进制整数除以基数2，余数便是等值的二进制的最低位。

        （2）将上一步的商再除以基数2，余数便是等值的二进制数的次低位。

        （3）重复步骤2，直到最后所得的商等于0为止。各次除得的余数，便是二进制各位的数，最后一次的余数是最高位
        while(temp){
          count+=temp%2;
          temp/=2;
        }
        res[i]=count;
    }
    return res;
  }
解法二 找规律
0 - 0
1 - 1
2 - 1
3 - 2
4 - 1
5 - 2
6 - 2
7 - 3
8 - 1
[2^(i-1),2^i-1]是由[0,2^(i-1)-1]数组+1得到的。例如上面的[4,7]的值是由[0,3]+1得到的。
代码
vector<int> countBits(int num) {
  vector<int>res(num+1,0);
  int base=1;
  int k=1;
  while(k<=num){
  //关键部分，以后解释
  for(int j=0;j<base&&k<=num;j++)res[k++]=res[j]+1;
  base<<=1;
  }
  return res;
}
        
        
        
        
